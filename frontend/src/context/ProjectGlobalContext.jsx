import { debounce } from "lodash";
import { createContext, useCallback, useContext, useEffect, useState } from "react";
import API from "../services/api/http";

const ProjectGlobalContext = createContext();

/**
 * üåê ProjectGlobalProvider
 * - Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ / ÏóÖÎ¨¥ Ìä∏Î¶¨ / ÏÑ†ÌÉù ÏÉÅÌÉúÎ•º Ï†ÑÏó≠ÏúºÎ°ú Í¥ÄÎ¶¨
 */
export function ProjectGlobalProvider({ children }) {
  const [projects, setProjects] = useState([]);
  const [tasksByProject, setTasksByProject] = useState({});
  const [selectedProjectId, setSelectedProjectId] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);
  const [viewType, setViewType] = useState(() => localStorage.getItem("viewType_global") || "list");
  const [loading, setLoading] = useState(false);
  const [openDrawer, setOpenDrawer] = useState(false);
  const [parentTaskId, setParentTaskId] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("ALL");
  const [filterAssignee, setFilterAssignee] = useState(null);

  /* ----------------------------------------
   * ‚úÖ viewType Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏûêÎèô Ï†ÄÏû•
   * ---------------------------------------- */
  useEffect(() => {
    localStorage.setItem("viewType_global", viewType);
  }, [viewType]);

  /* ----------------------------------------
   * ‚úÖ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
   * ---------------------------------------- */
  const fetchAllProjects = useCallback(async () => {
    try {
      setLoading(true);
      const { data } = await API.get("/projects");
      setProjects(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("‚ùå ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err);
      setProjects([]);
    } finally {
      setLoading(false);
    }
  }, []);

  /* ----------------------------------------
   * ‚úÖ ÌäπÏ†ï ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóÖÎ¨¥ Ìä∏Î¶¨ Î∂àÎü¨Ïò§Í∏∞
   * ---------------------------------------- */
  const _fetchTasksDirect = useCallback(async projectId => {
    if (!projectId) return;
    try {
      const { data } = await API.get(`/projects/${projectId}/tasks/tree`);
      setTasksByProject(prev => ({ ...prev, [projectId]: data }));
    } catch (err) {
      console.error(`‚ùå ÏóÖÎ¨¥ Î°úÎìú Ïã§Ìå® (projectId=${projectId}):`, err);
    }
  }, []);

  // ‚úÖ lodash.debounce Ï†ÅÏö© (250ms ÎÇ¥ Ï§ëÎ≥µ Ìò∏Ï∂ú Î≥ëÌï©)
  const fetchTasksByProject = useCallback(
    debounce(projectId => {
      _fetchTasksDirect(projectId);
    }, 250),
    [_fetchTasksDirect],
  );

  /* ----------------------------------------
   * ‚úÖ ÌäπÏ†ï ÏóÖÎ¨¥ Î°úÏª¨ ÏóÖÎç∞Ïù¥Ìä∏ (Î∂ÄÎ∂Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏµúÏ†ÅÌôî)
   * ---------------------------------------- */
  const updateTaskLocal = useCallback((taskId, updatedFields) => {
    if (!taskId || !updatedFields) return;

    setTasksByProject(prev => {
      const updated = { ...prev }; // ‚úÖ shallow copyÎ°ú Îπ†Î•∏ Ï≤òÎ¶¨

      for (const [pid, taskList] of Object.entries(updated)) {
        const idx = taskList.findIndex(t => String(t.task_id) === String(taskId));
        if (idx !== -1) {
          updated[pid] = [
            ...taskList.slice(0, idx),
            { ...taskList[idx], ...updatedFields },
            ...taskList.slice(idx + 1),
          ];
          break;
        }
      }

      return updated;
    });
  }, []);

  /* ----------------------------------------
   * ‚úÖ Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞ Î°úÎìú
   * ---------------------------------------- */
  useEffect(() => {
    fetchAllProjects();
  }, [fetchAllProjects]);

  /* ----------------------------------------
   * ‚úÖ Ïã†Í∑ú ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóÖÎ¨¥ Ìä∏Î¶¨ ÏûêÎèô Î°úÎìú
   * ---------------------------------------- */
  useEffect(() => {
    if (projects.length > 0) {
      const uncached = projects.filter(p => !tasksByProject[p.project_id]);
      if (uncached.length > 0) {
        Promise.all(uncached.map(p => fetchTasksByProject(p.project_id))).catch(err =>
          console.warn("‚ö†Ô∏è ÏùºÎ∂Ä ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ïã§Ìå®:", err),
        );
      }
    }
  }, [projects, tasksByProject, fetchTasksByProject]);

  /* ----------------------------------------
   * ‚úÖ ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Î°úÎìú
   * ---------------------------------------- */
  useEffect(() => {
    if (selectedProjectId && !tasksByProject[selectedProjectId]) {
      fetchTasksByProject(selectedProjectId);
    }
  }, [selectedProjectId, tasksByProject, fetchTasksByProject]);

  /* ----------------------------------------
   * ‚úÖ ÏÑ†ÌÉùÎêú Task ‚Üí Drawer ÏûêÎèô Ïò§Ìîà
   * ---------------------------------------- */
  useEffect(() => {
    if (selectedTask) setOpenDrawer(true);
  }, [selectedTask]);

  /* ----------------------------------------
   * üåê Context Í∞í Ï†úÍ≥µ
   * ---------------------------------------- */
  const value = {
    projects,
    tasksByProject,
    loading,
    selectedProjectId,
    setSelectedProjectId,
    selectedTask,
    setSelectedTask,
    viewType,
    setViewType,
    fetchAllProjects,
    fetchTasksByProject,
    updateTaskLocal,
    openDrawer,
    setOpenDrawer,
    parentTaskId,
    setParentTaskId,
    searchTerm,
    setSearchTerm,
    filterStatus,
    setFilterStatus,
    filterAssignee,
    setFilterAssignee,
  };

  return <ProjectGlobalContext.Provider value={value}>{children}</ProjectGlobalContext.Provider>;
}

/* ----------------------------------------
 * ‚úÖ Ï†ÑÏó≠ ÌõÖ
 * ---------------------------------------- */
export function useProjectGlobal() {
  const ctx = useContext(ProjectGlobalContext);
  if (!ctx) throw new Error("useProjectGlobal must be used within ProjectGlobalProvider");
  return ctx;
}
