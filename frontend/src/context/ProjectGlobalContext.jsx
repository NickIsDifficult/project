// src/context/ProjectGlobalContext.jsx
import { createContext, useContext, useEffect, useState } from "react";
import API from "../services/api/http";

const ProjectGlobalContext = createContext();

/**
 * üåê ProjectGlobalProvider
 * - Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ / ÏóÖÎ¨¥ Ìä∏Î¶¨ / ÏÑ†ÌÉù ÏÉÅÌÉúÎ•º Ï†ÑÏó≠ÏúºÎ°ú Í¥ÄÎ¶¨
 * - ProjectDetailPage, TaskDetailPanel, Kanban/List/CalendarÏóêÏÑú Í≥µÌÜµ ÏÇ¨Ïö©
 */
export function ProjectGlobalProvider({ children }) {
  const [projects, setProjects] = useState([]); // Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù
  const [tasksByProject, setTasksByProject] = useState({}); // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏóÖÎ¨¥ Ìä∏Î¶¨
  const [selectedProjectId, setSelectedProjectId] = useState(null); // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏
  const [selectedTask, setSelectedTask] = useState(null); // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏóÖÎ¨¥(ÏÉÅÏÑ∏ Ìå®ÎÑê)
  const [viewType, setViewType] = useState("list"); // ÌòÑÏû¨ Î∑∞ ÌÉÄÏûÖ
  const [loading, setLoading] = useState(false); // Ï†ÑÏó≠ Î°úÎî© ÏÉÅÌÉú
  const [openDrawer, setOpenDrawer] = useState(false);
  const [parentTaskId, setParentTaskId] = useState(null);

  /** ‚úÖ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ */
  async function fetchAllProjects() {
    try {
      setLoading(true);
      const { data } = await API.get("/projects");
      setProjects(data || []);
    } catch (err) {
      console.error("‚ùå ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err);
    } finally {
      setLoading(false);
    }
  }

  /** ‚úÖ ÌäπÏ†ï ÌîÑÎ°úÏ†ùÌä∏ ÏóÖÎ¨¥ Ìä∏Î¶¨ Î∂àÎü¨Ïò§Í∏∞ */
  async function fetchTasksByProject(projectId) {
    if (!projectId) return;
    try {
      const { data } = await API.get(`/projects/${projectId}/tasks/tree`);
      setTasksByProject(prev => ({
        ...prev,
        [projectId]: data || [],
      }));
    } catch (err) {
      console.error(`‚ùå ÌîÑÎ°úÏ†ùÌä∏(${projectId}) ÏóÖÎ¨¥ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:`, err);
    }
  }

  /** ‚úÖ Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú ÌäπÏ†ï ÏóÖÎ¨¥ Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑúÎ≤Ñ Î∞òÏòÅ Ï†Ñ Optimistic UpdateÏö©)
   *  - Ìä∏Î¶¨Ìòï Îç∞Ïù¥ÌÑ∞ÏóêÏÑúÎèÑ ÌïòÏúÑ ÏóÖÎ¨¥ÍπåÏßÄ ÏïàÏ†ÑÌïòÍ≤å Í∞±Ïã†Îê®
   */
  function updateTaskLocal(taskId, updatedTask) {
    if (!taskId || !updatedTask) return;

    // ÎÇ¥Î∂Ä Ïû¨Í∑Ä ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    const updateRecursive = tasks =>
      tasks.map(t => {
        if (t.task_id === taskId) return updatedTask;
        if (t.subtasks?.length) {
          return { ...t, subtasks: updateRecursive(t.subtasks) };
        }
        return t;
      });

    setTasksByProject(prev => {
      const newState = { ...prev };
      Object.keys(newState).forEach(pid => {
        newState[pid] = updateRecursive(newState[pid]);
      });
      return newState;
    });
  }

  /** ‚úÖ Ï¥àÍ∏∞ Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú */
  useEffect(() => {
    fetchAllProjects();
  }, []);

  /** ‚úÖ projects Î≥ÄÍ≤Ω Ïãú Ï∫êÏã±ÎêòÏßÄ ÏïäÏùÄ ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóÖÎ¨¥ Ìä∏Î¶¨ ÏûêÎèô Î°úÎìú */
  useEffect(() => {
    if (projects.length > 0) {
      const uncached = projects.filter(p => !tasksByProject[p.project_id]);
      if (uncached.length > 0) {
        Promise.all(uncached.map(p => fetchTasksByProject(p.project_id)));
      }
    }
  }, [projects]);

  /** ‚úÖ ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Îç∞Ïù¥ÌÑ∞ Î°úÎìú */
  useEffect(() => {
    if (selectedProjectId && !tasksByProject[selectedProjectId]) {
      fetchTasksByProject(selectedProjectId);
    }
  }, [selectedProjectId]);

  /** üåê Ï†ÑÏó≠ Í∞í Ï†úÍ≥µ */
  const value = {
    projects,
    tasksByProject,
    loading,
    selectedProjectId,
    setSelectedProjectId,
    selectedTask,
    setSelectedTask,
    viewType,
    setViewType,
    fetchAllProjects,
    fetchTasksByProject,
    updateTaskLocal,
    openDrawer,
    setOpenDrawer,
    parentTaskId,
    setParentTaskId,
  };

  return <ProjectGlobalContext.Provider value={value}>{children}</ProjectGlobalContext.Provider>;
}

/** ‚úÖ Ï†ÑÏó≠ ÌõÖ */
export function useProjectGlobal() {
  const ctx = useContext(ProjectGlobalContext);
  if (!ctx) throw new Error("useProjectGlobal must be used within ProjectGlobalProvider");
  return ctx;
}
